/*! @comsemrel/typescript-vfs-compiler v0.1.0 | (c) 2017 undefined | MIT license (see LICENSE) */import{existsSync,readFileSync}from'fs';import{DiagnosticCategory,createProgram,createSourceFile,flattenDiagnosticMessageText,getDefaultLibFilePath,getPreEmitDiagnostics}from'typescript';import chalk from'chalk';class CompilerHost{constructor(a){if(!a||'object'!=typeof a||Array.isArray(a))throw new TypeError('First parameter must be an object.');this.files=a}fileExists(a){return'undefined'!=typeof this.files[a]||existsSync(a)}getCanonicalFileName(a){return a+''}getCurrentDirectory(){return''}getDefaultLibFileName(a){return getDefaultLibFilePath(a)}getNewLine(){return'\n'}getSourceFile(a,b){const c=-1!==a.indexOf('lib.d.ts')&&-1!==a.indexOf('/')?readFileSync(a,'utf8'):this.files[a];return createSourceFile(a,c,b,'1.0',!0)}useCaseSensitiveFileNames(){return!0}writeFile(a,b){this.files[a]=b}}function handleErrors(a,b){const c=getPreEmitDiagnostics(a).concat(b.diagnostics);let d=!1;if(c.forEach((e)=>{const{line:f,character:g}=e.file.getLineAndCharacterOfPosition(e.start),h=flattenDiagnosticMessageText(e.messageText,'\n');let i=chalk.blue('[Info]'),j='log';e.category===DiagnosticCategory.Warning?(i=chalk.yellow('[Warning]'),j='warn'):e.category===DiagnosticCategory.Error&&(i=chalk.red('[Error]'),j='error',d=!0),console[j](`${i} ${e.file.fileName} (${f+1},${g+1}): ${h}`)}),d||b.emitSkipped)throw new Error('Compilation was unsuccessful!')}function compiler$1(a,b={}){const c=Object.assign({},a),d=new CompilerHost(c),e=createProgram(b.entry||['index.ts'],b,d),f=e.emit();return handleErrors(e,f),c}export{CompilerHost,handleErrors};export default compiler$1;
//# sourceMappingURL=compiler.es2015.js.map
